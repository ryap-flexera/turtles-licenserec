// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// licenseRec HTTP client CLI support package
//
// Command:
// $ goa gen github.com/flexera/turtles-licenserec/license_rec_api/design

package client

import (
	"fmt"
	"strconv"

	licenserec "github.com/flexera/turtles-licenserec/license_rec_api/gen/license_rec"
)

// BuildGetLicensePayload builds the payload for the licenseRec GetLicense
// endpoint from CLI flags.
func BuildGetLicensePayload(licenseRecGetLicenseLicenseID string) (*licenserec.LicenseObject, error) {
	var err error
	var licenseID int
	{
		var v int64
		v, err = strconv.ParseInt(licenseRecGetLicenseLicenseID, 10, 64)
		licenseID = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for licenseID, must be INT")
		}
	}
	if err != nil {
		return nil, err
	}
	payload := &licenserec.LicenseObject{
		LicenseID: licenseID,
	}
	return payload, nil
}

// BuildUpdateLicensePayload builds the payload for the licenseRec
// UpdateLicense endpoint from CLI flags.
func BuildUpdateLicensePayload(licenseRecUpdateLicenseLicenseID string) (*licenserec.LicenseObject, error) {
	var err error
	var licenseID int
	{
		var v int64
		v, err = strconv.ParseInt(licenseRecUpdateLicenseLicenseID, 10, 64)
		licenseID = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for licenseID, must be INT")
		}
	}
	if err != nil {
		return nil, err
	}
	payload := &licenserec.LicenseObject{
		LicenseID: licenseID,
	}
	return payload, nil
}
